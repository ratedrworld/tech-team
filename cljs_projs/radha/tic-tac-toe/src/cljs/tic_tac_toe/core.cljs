(ns tic-tac-toe.core)

(defn get-map []
  (for [i (range 1 10)
        :let [prod (.-value (.getElementById js/document i))]]
    prod))

(defn clear [no]
  (set! (.-value (.getElementById js/document no)) ""))

(defn reset []
  (loop [i 9]
    (when (> i 0)
      (clear i)
      (recur (dec i))))
  (js/alert "play again"))

(defn check []
  (or (= "X" (.-value (.getElementById js/document 1))
             (.-value (.getElementById js/document 2))
             (.-value (.getElementById js/document 3)))
          (= "X" (.-value (.getElementById js/document 4))
             (.-value (.getElementById js/document 5))
             (.-value (.getElementById js/document 6)))
          (= "X" (.-value (.getElementById js/document 7))
             (.-value (.getElementById js/document 8))
             (.-value (.getElementById js/document 9)))
          (= "X" (.-value (.getElementById js/document 1))
             (.-value (.getElementById js/document 4))
             (.-value (.getElementById js/document 7)))
          (= "X" (.-value (.getElementById js/document 2))
             (.-value (.getElementById js/document 5))
             (.-value (.getElementById js/document 8)))
          (= "X" (.-value (.getElementById js/document 3))
             (.-value (.getElementById js/document 6))
             (.-value (.getElementById js/document 9)))
          (= "X" (.-value (.getElementById js/document 1))
             (.-value (.getElementById js/document 5))
             (.-value (.getElementById js/document 9)))
          (= "X" (.-value (.getElementById js/document 3))
             (.-value (.getElementById js/document 5))
             (.-value (.getElementById js/document 7)))
          (= "O" (.-value (.getElementById js/document 1))
             (.-value (.getElementById js/document 2))
             (.-value (.getElementById js/document 3)))
          (= "O" (.-value (.getElementById js/document 4))
             (.-value (.getElementById js/document 5))
             (.-value (.getElementById js/document 6)))
          (= "O" (.-value (.getElementById js/document 7))
             (.-value (.getElementById js/document 8))
             (.-value (.getElementById js/document 9)))
          (= "O" (.-value (.getElementById js/document 1))
             (.-value (.getElementById js/document 4))
             (.-value (.getElementById js/document 7)))
          (= "O" (.-value (.getElementById js/document 2))
             (.-value (.getElementById js/document 5))
             (.-value (.getElementById js/document 8)))
          (= "O" (.-value (.getElementById js/document 3))
             (.-value (.getElementById js/document 6))
             (.-value (.getElementById js/document 9)))
          (= "O" (.-value (.getElementById js/document 1))
             (.-value (.getElementById js/document 5))
             (.-value (.getElementById js/document 9)))
          (= "O" (.-value (.getElementById js/document 3))
             (.-value (.getElementById js/document 5))
             (.-value (.getElementById js/document 7))))
  )

(defn mark [no]
  (if (check)
    (do (js/alert "you won")
        (reset))
    (if (= 9 (count (filter #(not (empty? %)) (get-map))))
      (reset)
      (if (even? (count (filter #(not (empty? %)) (get-map))))
        (set! (.-value (.getElementById js/document no)) "X")
        (set! (.-value (.getElementById js/document no)) "O")))))
