{:rename-macros {}, :renames {}, :externs {document {getElementById {}}, Object {value {}}}, :use-macros {}, :excludes #{}, :name cljs-basic.core, :imports nil, :requires {string clojure.string, clojure.string clojure.string}, :cljs.spec/speced-vars [], :uses nil, :defs {get-output {:protocol-inline nil, :meta {:file "/home/hitesh/cljs-basic/src/cljs/cljs_basic/core.cljs", :line 5, :column 7, :end-line 5, :end-column 17, :arglists (quote ([input])), :doc "Converts input to output"}, :name cljs-basic.core/get-output, :variadic false, :file "src/cljs/cljs_basic/core.cljs", :end-column 17, :method-params ([input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input])), :doc "Converts input to output"}, encrypt {:protocol-inline nil, :meta {:file "/home/hitesh/cljs-basic/src/cljs/cljs_basic/core.cljs", :line 12, :column 7, :end-line 12, :end-column 14, :arglists (quote ([stri key])), :doc "Encrypts the string based on key"}, :name cljs-basic.core/encrypt, :variadic false, :file "src/cljs/cljs_basic/core.cljs", :end-column 14, :method-params ([stri key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([stri key])), :doc "Encrypts the string based on key"}, mymain {:protocol-inline nil, :meta {:file "/home/hitesh/cljs-basic/src/cljs/cljs_basic/core.cljs", :line 24, :column 7, :end-line 24, :end-column 13, :arglists (quote ([& args])), :doc "I don't do a whole lot ... yet.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs-basic.core/mymain, :variadic true, :file "src/cljs/cljs_basic/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "I don't do a whole lot ... yet."}}, :cljs.spec/registry-ref [], :require-macros nil, :doc nil}